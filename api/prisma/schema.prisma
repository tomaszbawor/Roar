// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  name      String?    @unique
  role      UserRole   @default(USER)
  character Character?
  password  String
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model Character {
  id                 String         @id @default(uuid())
  name               String         @unique
  user               User           @relation(fields: [userId], references: [id])
  userId             String         @unique
  village            Village
  rank               Rank           @default(STUDENT)
  offensiveNinjutsu  Int            @default(1)
  offensiveTaijutsu  Int            @default(1)
  offensiveGenjutsu  Int            @default(1)
  offensiveBukijutsu Int            @default(1)
  defensiveNinjutsu  Int            @default(1)
  defensiveTaijutsu  Int            @default(1)
  defensiveGenjutsu  Int            @default(1)
  defensiveBukijutsu Int            @default(1)
  speed              Int            @default(1)
  intelligence       Int            @default(1)
  strength           Int            @default(1)
  endurance          Int            @default(1)
  characterPool      CharacterPool?
  battlesInitiated   Battle[]       @relation("attacker_relation")
  battlesDefender    Battle[]       @relation("defender_relation")
  isInBattle         Boolean        @default(false)
  currentBattleId    String?
  ownedSkills        OwnedSkill[]
  currency           Int            @default(0)
}

model CharacterPool {
  characterId String    @id @unique
  character   Character @relation(fields: [characterId], references: [id])
  level       Int       @default(1)
  experience  Int       @default(0)
  health      Int       @default(100)
  maxHealth   Int       @default(100)
  chakra      Int       @default(100)
  maxChakra   Int       @default(100)
  stamina     Int       @default(100)
  maxStamina  Int       @default(100)
}

enum UserRole {
  USER
  MOD
  ADMIN
}

enum Village {
  LEAF
  STONE
  SAND
  CLOUD
  MIST
}

enum Rank {
  STUDENT
  GENIN
  CHUNIN
  JONIN
}

model ArenaCharacter {
  id                 String                @id @default(uuid())
  name               String
  health             Int                   @default(100)
  offensiveNinjutsu  Int                   @default(1)
  offensiveTaijutsu  Int                   @default(1)
  offensiveGenjutsu  Int                   @default(1)
  offensiveBukijutsu Int                   @default(1)
  defensiveNinjutsu  Int                   @default(1)
  defensiveTaijutsu  Int                   @default(1)
  defensiveGenjutsu  Int                   @default(1)
  defensiveBukijutsu Int                   @default(1)
  speed              Int                   @default(1)
  intelligence       Int                   @default(1)
  strength           Int                   @default(1)
  endurance          Int                   @default(1)
  active             Boolean               @default(true)
  battle             Battle[]
  skills             ArenaCharacterSkill[]
  currencyGain       Int                   @default(1)
}

model Battle {
  id                       String          @id @default(uuid())
  createdAt                DateTime        @default(now())
  state                    BattleState     @default(INITIALIZED)
  type                     BattleType
  attackerId               String
  attacker                 Character       @relation("attacker_relation", fields: [attackerId], references: [id])
  defenderId               String?
  userDefender             Character?      @relation("defender_relation", fields: [defenderId], references: [id])
  defenderArenaCharacterId String?
  aiDefender               ArenaCharacter? @relation(fields: [defenderArenaCharacterId], references: [id])
  attackerHealth           Int
  defenderHealth           Int
  attackerMaxHealth        Int
  defenderMaxHealth        Int
  turn                     Int             @default(1)
  battleResult             BattleResult?
  battleLog                BattleLog[]
}

model BattleLog {
  battle            Battle         @relation(fields: [battleId], references: [id])
  battleId          String
  createdAt         DateTime       @default(now())
  turn              Int
  attackerLog       String?
  defenderLog       String?
  attackerDamage    Int?
  defenderDamage    Int?
  attackerSkillId   String?
  attackerSkillUsed SkillSkeleton? @relation("attackerSkillReference", fields: [attackerSkillId], references: [id])
  defenderSkillId   String?
  defenderSkillUsed SkillSkeleton? @relation("defenderSkillReference", fields: [defenderSkillId], references: [id])

  @@id([battleId, turn])
}

enum BattleState {
  INITIALIZED
  WAITING_FOR_BOTH
  WAITING_FOR_ATTACKER
  WAITING_FOR_DEFENDER
  ACTIONS_DONE
  FINISHED
}

enum BattleType {
  AI
  PVP
}

enum BattleResult {
  TIE
  ATTACKER_WIN
  DEFENDER_WIN
}

model SkillSkeleton {
  id                       String                @id @default(uuid())
  name                     String                @unique
  type                     SkillType
  skillRank                Rank
  availableForAll          Boolean               @default(true) // If false, this will be skill for ai and bosses
  learnableSkill           Boolean               @default(true) // If this skill can be bought in the shop
  villageSkill             Boolean               @default(false) // If this skill can be bought learn only in the village
  villageBasis             Village?
  basePower                Float                 @default(1)
  staminaCost              Int
  chakraCost               Int
  description              String
  battleLogAction          String
  genjutsuPercentRatio     Int                   @default(0)
  taijutsuPercentRatio     Int                   @default(0)
  ninjutsuPercentRatio     Int                   @default(0)
  bukijutsuPercentRatio    Int                   @default(0)
  speedPercentRatio        Int                   @default(0)
  intelligencePercentRatio Int                   @default(0)
  strengthPercentRatio     Int                   @default(0)
  endurancePercentRatio    Int                   @default(0)
  element                  Element?
  cooldown                 Int
  OwnedSkill               OwnedSkill[]
  ArenaCharacterSkill      ArenaCharacterSkill[]
  attackerSkillReference   BattleLog[]           @relation("attackerSkillReference")
  defenderSkillReference   BattleLog[]           @relation("defenderSkillReference")
}

enum SkillType {
  NINJUTSU
  TAIJUTSU
  GENJUTSU
  BUKIJUTSU
}

enum Element {
  FIRE
  WATER
  WIND
  EARTH
  LIGHTNING
  ICE
  SCORCHING
  LIGHT
  TEMPEST
  DUST
  MAGNETISM
  STORM
  WOOD
  LAVA
  STEAM
}

model OwnedSkill {
  skillSkeleton   SkillSkeleton @relation(fields: [skillSkeletonId], references: [id])
  skillSkeletonId String
  character       Character     @relation(fields: [characterId], references: [id])
  characterId     String
  level           Int           @default(1)
  uses            Int           @default(0)

  @@id([skillSkeletonId, characterId])
}

model ArenaCharacterSkill {
  arenaCharacterId String
  arenaCharacter   ArenaCharacter @relation(fields: [arenaCharacterId], references: [id])
  skillSkeletonId  String
  skillSkeleton    SkillSkeleton  @relation(fields: [skillSkeletonId], references: [id])

  @@id([arenaCharacterId, skillSkeletonId])
}
